#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const models = require('../models');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.MULU_SERVER_PORT || "4001");
app.set("port", port);
/**
 * Create HTTP server.
 */
const server = http.createServer(app);
const io = require("socket.io")(server);
io.on("connection", socket => {
  console.log('New user connection')

  socket.on('disconnect', () => {
    console.log('user disconnected');
  });

  socket.on("join", async data => {
    const { chatRoomId, userId } = data

    await models.ChatRoom.findByIdAndUpdate(
      chatRoomId,
      { $push: { participants: userId } },
      { new: true, useFindAndModify: false },
    )
      .exec((err, result) => {
        if (err) io.emit("newError", err)
        if (result) {
          socket.join(chatRoomId);
          io.emit("roomJoined", userId);
        }
      });
  });

  socket.on("message", async data => {
    const { chatRoomId, userId, message } = data;

    const chatMessage = await models.Message.create({
      chatRoom: chatRoomId,
      user: userId,
      message,
    })

    await models.Message.findById(chatMessage._id)
      .populate(['user'])
      .exec(async (err, res) => {
        if (err) io.emit("newError", err)
        if (res) {
          await models.ChatRoom.findByIdAndUpdate(
            chatRoomId,
            { $push: { messages: chatMessage._id } },
            { new: true, useFindAndModify: false },
          )
            .exec((err, result) => {
              if (err) io.emit("newError", err)
              if (result) io.emit("newMessage", res);
            });
        }
    })
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
// handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(`App is listening on ${bind}!`)
}
